import os
import logging
import asyncio
import aiohttp
import json
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import qrcode
import io
from datetime import datetime, timedelta
import re

# Configuration
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_IDS = [int(x) for x in os.getenv('TELEGRAM_ADMIN_IDS', '').split(',') if x]
NODE_API_URL = os.getenv('NODE_API_URL', 'http://localhost:3000')
SUPPORT_CONTACT = "@Nova_king0"

# Setup logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class NovaMDTelegramBot:
    def __init__(self):
        self.application = Application.builder().token(TOKEN).build()
        self.setup_handlers()
        
    def setup_handlers(self):
        # Commandes utilisateur
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("use_code", self.use_code))
        self.application.add_handler(CommandHandler("subscribe", self.subscribe_info))
        self.application.add_handler(CommandHandler("connect", self.connect_options))
        self.application.add_handler(CommandHandler("status", self.status))
        self.application.add_handler(CommandHandler("menu", self.show_main_menu))
        self.application.add_handler(CommandHandler("whatsapp_settings", self.whatsapp_settings))
        
        # Commandes admin
        self.application.add_handler(CommandHandler("admin", self.admin_panel))
        self.application.add_handler(CommandHandler("generate_code", self.generate_code))
        self.application.add_handler(CommandHandler("stats", self.stats))
        self.application.add_handler(CommandHandler("upgrade", self.upgrade_bot))
        self.application.add_handler(CommandHandler("commands", self.manage_commands))
        
        # Handlers de messages
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
    def get_main_keyboard(self):
        """Clavier principal pour les utilisateurs"""
        keyboard = [
            [KeyboardButton("üîë Utiliser Code"), KeyboardButton("üíé S'abonner")],
            [KeyboardButton("üîó Connecter WhatsApp"), KeyboardButton("üìä Statut")],
            [KeyboardButton("‚öôÔ∏è Param√®tres WhatsApp"), KeyboardButton("üÜò Aide")],
            [KeyboardButton("üì± Menu Principal")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="Choisissez une option...")

    def get_admin_keyboard(self):
        """Clavier pour les administrateurs"""
        keyboard = [
            [KeyboardButton("üîë G√©n√©rer Code"), KeyboardButton("üìä Statistiques")],
            [KeyboardButton("üîÑ Mise √† Jour"), KeyboardButton("‚öôÔ∏è Commandes")],
            [KeyboardButton("üì± Menu Principal"), KeyboardButton("üë• Utilisateurs")],
            [KeyboardButton("‚öôÔ∏è Param√®tres WhatsApp")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="Options administrateur...")

    def get_connection_keyboard(self):
        """Clavier pour les options de connexion"""
        keyboard = [
            [KeyboardButton("üì± QR Code"), KeyboardButton("üî¢ Pairing Code")],
            [KeyboardButton("üéØ Essai 24h Gratuit"), KeyboardButton("üì± Menu Principal")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="Choisissez la m√©thode...")

    def get_trial_keyboard(self):
        """Clavier pour les options d'essai"""
        keyboard = [
            [KeyboardButton("üéØ Essai 24h Gratuit"), KeyboardButton("üíé Acheter Premium")],
            [KeyboardButton("üì± Menu Principal")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="Choisissez une option...")

    def get_settings_keyboard(self):
        """Clavier pour les param√®tres WhatsApp"""
        keyboard = [
            [KeyboardButton("üîá Activer Mode Silencieux"), KeyboardButton("üîä D√©sactiver Mode Silencieux")],
            [KeyboardButton("üîí Activer Mode Priv√©"), KeyboardButton("üîì D√©sactiver Mode Priv√©")],
            [KeyboardButton("üë• G√©rer Acc√®s"), KeyboardButton("üì± Menu Principal")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="Param√®tres WhatsApp...")

    def escape_markdown(self, text):
        """√âchapper les caract√®res sp√©ciaux Markdown"""
        escape_chars = r'\_*[]()~`>#+-=|{}.!'
        return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # Enregistrer l'utilisateur
        await self.register_user(chat_id, user.first_name, user.username)
        
        welcome_text = self.escape_markdown(f"""
ü§ñ Bienvenue sur NOVA-MD Premium ü§ñ

Service de Bot WhatsApp Automatis√© avec Sessions Persistantes

üéØ Fonctionnalit√©s Premium:
‚Ä¢ Commandes audio avanc√©es
‚Ä¢ Gestion de m√©dias intelligente  
‚Ä¢ Sessions WhatsApp permanentes
‚Ä¢ Support prioritaire 24/7
‚Ä¢ Mises √† jour automatiques
‚Ä¢ Mode silencieux
‚Ä¢ Contr√¥le d'acc√®s

üîê Syst√®me d'Acc√®s Unique:
‚Ä¢ 1 code d'acc√®s = 1 utilisateur
‚Ä¢ 1 utilisateur = 1 device WhatsApp  
‚Ä¢ Session permanente selon la dur√©e

Utilisez les boutons ci-dessous pour naviguer!
        """)
        
        await update.message.reply_text(
            welcome_text, 
            reply_markup=self.get_main_keyboard(),
            parse_mode='MarkdownV2'
        )
        
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        
        # V√©rifier si admin pour afficher le clavier appropri√©
        if chat_id in ADMIN_IDS:
            menu_text = self.escape_markdown("‚ö° Menu Principal NOVA-MD\n\nChoisissez une option:")
            await update.message.reply_text(
                menu_text,
                reply_markup=self.get_admin_keyboard(),
                parse_mode='MarkdownV2'
            )
        else:
            menu_text = self.escape_markdown("‚ö° Menu Principal NOVA-MD\n\nChoisissez une option:")
            await update.message.reply_text(
                menu_text,
                reply_markup=self.get_main_keyboard(),
                parse_mode='MarkdownV2'
            )

    async def use_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        
        code_text = self.escape_markdown("""
üîë Activation du code d'acc√®s

Veuillez entrer le code que vous avez re√ßu de l'administrateur:

Format: NOVA-XXXXXXX

Important:
‚Ä¢ Un code ne peut √™tre utilis√© qu'UNE SEULE FOIS
‚Ä¢ Un code = Un utilisateur = Un device WhatsApp
‚Ä¢ Votre session sera permanente selon la dur√©e du code
        """)
        
        await update.message.reply_text(
            code_text,
            parse_mode='MarkdownV2',
            reply_markup=ReplyKeyboardRemove()
        )
        
        context.user_data['waiting_for_code'] = True

    async def send_qr_code(self, chat_id, qr_data, session_id):
        """Envoyer le QR code √† l'utilisateur"""
        try:
            # G√©n√©rer l'image QR code
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(qr_data)
            qr.make(fit=True)

            img = qr.make_image(fill_color="black", back_color="white")
        
            # Convertir en bytes
            img_buffer = io.BytesIO()
            img.save(img_buffer, format='PNG')
            img_buffer.seek(0)

            # Pr√©parer le message
            instructions = self.escape_markdown(f"""
üì± Connexion WhatsApp - QR Code

1. Ouvrez WhatsApp ‚Üí Param√®tres
2. Appareils li√©s ‚Üí Lier un appareil  
3. Scannez le QR code ci-dessous
4. Attendez la confirmation

üîê SESSION PERMANENTE
Votre session restera active automatiquement

‚è±Ô∏è Le QR expire dans 2 minutes
            """)

            # Envoyer d'abord les instructions
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=instructions,
                parse_mode='MarkdownV2'
            )

            # Ensuite envoyer l'image QR code
            await self.application.bot.send_photo(
                chat_id=chat_id,
                photo=img_buffer,
                caption="Scannez ce QR code avec WhatsApp üì≤"
            )
        
            logger.info(f"‚úÖ QR Code envoy√© √† {chat_id} - Session: {session_id}")
        
        except Exception as e:
            logger.error(f"‚ùå Erreur envoi QR code: {e}")
            # Fallback: envoyer le texte du QR code
            try:
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=self.escape_markdown(f"‚ùå Impossible de g√©n√©rer l'image QR\n\nCode texte: `{qr_data}`\n\nCopiez ce code manuellement dans WhatsApp"),
                    parse_mode='MarkdownV2'
                )
            except Exception as fallback_error:
                logger.error(f"‚ùå Erreur fallback QR code: {fallback_error}")

    async def send_pairing_code(self, chat_id, code, phone_number):
        """Envoyer le code de pairing √† l'utilisateur"""
        try:
            pairing_text = self.escape_markdown(f"""
üîê Connexion par Code de Pairing

üì± Votre code de pairing:
`{code}`

Instructions:
1. Ouvrez WhatsApp sur votre t√©l√©phone
2. Allez dans Param√®tres ‚Üí Appareils li√©s 
3. S√©lectionnez Lier un appareil
4. Entrez le code ci-dessus
5. Attendez la confirmation

‚è±Ô∏è Ce code expire dans 5 minutes

La connexion se fera automatiquement!
            """)
        
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=pairing_text,
                parse_mode='MarkdownV2'
            )
            logger.info(f"‚úÖ Code de pairing envoy√© √† {chat_id}: {code}")
        
        except Exception as e:
            logger.error(f"‚ùå Erreur envoi code pairing: {e}") 

    async def subscribe_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        subscribe_text = self.escape_markdown(f"""
üíé Abonnement NOVA-MD Premium

Comment obtenir l'acc√®s:
1. Contactez l'administrateur {SUPPORT_CONTACT}
2. Choisissez votre formule pr√©f√©r√©e
3. Recevez votre code d'acc√®s unique
4. Utilisez le bouton üîë Utiliser Code

Formules disponibles:
‚Ä¢ 1 mois - Session permanente 30 jours
‚Ä¢ 3 mois - Session permanente 90 jours
‚Ä¢ 6 mois - Session permanente 180 jours  
‚Ä¢ 1 an - Session permanente 365 jours

Avantages inclus:
üîê Session WhatsApp PERMANENTE
üì± 1 code = 1 utilisateur = 1 device
‚ö° Connexion QR Code ou Pairing Code
üîá Mode silencieux
üîí Contr√¥le d'acc√®s
üõ°Ô∏è Support prioritaire 24/7
üîÑ Mises √† jour automatiques

Contact pour abonnement:
{SUPPORT_CONTACT}
        """)
        
        await update.message.reply_text(
            subscribe_text, 
            reply_markup=self.get_main_keyboard(),
            parse_mode='MarkdownV2'
        )

    async def connect_options(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        
        # V√©rifier si l'utilisateur a un acc√®s actif
        access = await self.check_user_access(chat_id)
        
        if not access['hasAccess']:
            await update.message.reply_text(
                self.escape_markdown("""
üîó Options de Connexion WhatsApp

üì± Mode Essai Gratuit (24h):
‚Ä¢ Session WhatsApp temporaire
‚Ä¢ Fonctionnalit√©s de base
‚Ä¢ Parfaite pour tester

üíé Premium (Recommand√©):
‚Ä¢ Session PERMANENTE
‚Ä¢ Toutes les fonctionnalit√©s
‚Ä¢ Support prioritaire

Choisissez une option:
                """),
                parse_mode='MarkdownV2',
                reply_markup=self.get_trial_keyboard()
            )
            return
            
        access_text = self.escape_markdown(f"""
üîó Choisissez la m√©thode de connexion:

üì± QR Code - Scannez avec l'appareil photo
üî¢ Pairing Code - Entrez un code num√©rique

üí° Session permanente active jusqu'au {access.get('endDate', 'N/A')}
        """)
        
        await update.message.reply_text(
            access_text,
            reply_markup=self.get_connection_keyboard(),
            parse_mode='MarkdownV2'
        )

    async def ask_phone_number(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Demander le num√©ro de t√©l√©phone pour le pairing"""
        chat_id = update.effective_chat.id
        
        await update.message.reply_text(
            self.escape_markdown("""
üì± Connexion par Pairing Code

Veuillez entrer votre num√©ro de t√©l√©phone WhatsApp:

‚Ä¢ Format: 237612345678 (sans espaces, sans +)
‚Ä¢ Exemple: 237612345678 pour le Cameroun

üîí Confidentialit√©:
   ‚Ä¢ Votre num√©ro est utilis√© UNIQUEMENT pour g√©n√©rer le code
   ‚Ä¢ Il n'est JAMAIS sauvegard√© dans notre base de donn√©es
   ‚Ä¢ Il est supprim√© imm√©diatement apr√®s utilisation

‚ö†Ô∏è Important:
   ‚Ä¢ Utilisez le m√™me num√©ro que sur votre t√©l√©phone
   ‚Ä¢ Le num√©ro doit √™tre actif et avoir WhatsApp
            """),
            parse_mode='MarkdownV2',
            reply_markup=ReplyKeyboardRemove()
        )
        
        context.user_data['waiting_for_phone'] = True
        context.user_data['pending_pairing'] = True

    async def start_trial_session(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        user = update.effective_user
        
        await update.message.reply_text(
            self.escape_markdown("üéØ D√©marrage de votre essai gratuit 24h!\n\nCr√©ation de votre session WhatsApp..."),
            parse_mode='MarkdownV2'
        )
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{NODE_API_URL}/api/sessions/create", json={
                    'chat_id': str(chat_id),
                    'user_name': user.first_name,
                    'method': 'qr',
                    'persistent': False
                }) as response:
                    result = await response.json()
                    
                    if result.get('success'):
                        await update.message.reply_text(
                            self.escape_markdown("""
‚úÖ Essai activ√© pour 24 heures!

Vous pouvez maintenant connecter WhatsApp.
Choisissez la m√©thode de connexion:
                            """),
                            parse_mode='MarkdownV2',
                            reply_markup=self.get_connection_keyboard()
                        )
                    else:
                        error_msg = result.get('error', 'Erreur inconnue')
                        await update.message.reply_text(
                            self.escape_markdown(f"‚ùå Impossible de cr√©er l'essai\n\nErreur: {error_msg}\n\nR√©essayez ou contactez le support."),
                            parse_mode='MarkdownV2'
                        )
        except Exception as e:
            await update.message.reply_text(
                self.escape_markdown("‚ùå Erreur de connexion\n\nLe serveur ne r√©pond pas. R√©essayez plus tard."),
                parse_mode='MarkdownV2'
            )

    async def connect_whatsapp_qr(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        user = update.effective_user
        
        # V√©rifier l'acc√®s
        access_check = await self.check_user_access(chat_id)
        
        if not access_check['hasAccess']:
            await update.message.reply_text(
                self.escape_markdown("‚ùå Acc√®s non autoris√©\n\nVous n'avez pas d'abonnement actif."),
                parse_mode='MarkdownV2',
                reply_markup=self.get_main_keyboard()
            )
            return
        
        # V√©rifier si une session active existe d√©j√†
        existing_session = await self.get_user_session(chat_id)
        if existing_session and existing_session.get('status') == 'connected':
            session_days = await self.get_session_days(existing_session.get('created_at'))
            await update.message.reply_text(
                self.escape_markdown(f"""
‚úÖ Session d√©j√† active!

Session permanente active depuis {session_days} jours
Active jusqu'au {access_check.get('endDate', 'N/A')}
                """),
                parse_mode='MarkdownV2',
                reply_markup=self.get_main_keyboard()
            )
            return
            
        # Cr√©er une nouvelle session QR
        await update.message.reply_text(
            self.escape_markdown("üîÑ G√©n√©ration du QR Code..."),
            parse_mode='MarkdownV2'
        )
        
        session_data = await self.create_whatsapp_session(chat_id, user.first_name, 'qr')
        if session_data and 'qr_code' in session_data:
            qr = qrcode.QRCode()
            qr.add_data(session_data['qr_code'])
            
            img_buffer = io.BytesIO()
            qr.make_image().save(img_buffer, format='PNG')
            img_buffer.seek(0)
            
            instructions = self.escape_markdown(f"""
üì± Connexion WhatsApp - QR Code

1. Ouvrez WhatsApp ‚Üí Param√®tres
2. Appareils li√©s ‚Üí Lier un appareil  
3. Scannez le QR code ci-dessous
4. Attendez la confirmation

üîê SESSION PERMANENTE
Valable jusqu'au {access_check.get('endDate', 'N/A')}

‚è±Ô∏è Le QR expire dans 2 minutes
            """)
            
            await update.message.reply_text(instructions, parse_mode='MarkdownV2')
            await update.message.reply_photo(
                img_buffer, 
                caption="Scannez-moi avec WhatsApp üì≤",
                reply_markup=self.get_main_keyboard()
            )
            
        else:
            await update.message.reply_text(
                self.escape_markdown("‚ùå Erreur lors de la cr√©ation de la session."),
                reply_markup=self.get_main_keyboard()
            )

    async def connect_whatsapp_pairing(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        
        # V√©rifier l'acc√®s
        access_check = await self.check_user_access(chat_id)
        
        if not access_check['hasAccess']:
            await update.message.reply_text(
                self.escape_markdown("‚ùå Acc√®s non autoris√©\n\nVous n'avez pas d'abonnement actif."),
                parse_mode='MarkdownV2',
                reply_markup=self.get_main_keyboard()
            )
            return
        
        # Demander le num√©ro de t√©l√©phone
        await self.ask_phone_number(update, context)

    async def process_phone_number(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Traiter le num√©ro de t√©l√©phone pour le pairing"""
        chat_id = update.effective_chat.id
        phone_input = update.message.text.strip()
        user = update.effective_user
        
        # Nettoyer le num√©ro
        phone_number = phone_input.replace('+', '').replace(' ', '').replace('-', '')
        
        # Validation du num√©ro
        if not phone_number.isdigit() or len(phone_number) < 10:
            await update.message.reply_text(
                self.escape_markdown("‚ùå Num√©ro invalide\n\nVeuillez entrer un num√©ro valide (ex: 237612345678):"),
                parse_mode='MarkdownV2'
            )
            return
    
        await update.message.reply_text(
            self.escape_markdown(f"üîÑ G√©n√©ration du code de pairing..."),
            parse_mode='MarkdownV2'
        )
        
        try:
            # Cr√©er la session avec le num√©ro
            session_data = await self.create_whatsapp_session_with_phone(chat_id, user.first_name, phone_number)
            
            if session_data and session_data.get('success'):
                await update.message.reply_text(
                    self.escape_markdown("‚úÖ Code de pairing g√©n√©r√©!\n\nLe serveur pr√©pare votre code...\nVous le recevrez dans quelques secondes."),
                    parse_mode='MarkdownV2',
                    reply_markup=self.get_main_keyboard()
                )
            else:
                error_msg = session_data.get('error', 'Erreur inconnue') if session_data else 'Pas de r√©ponse du serveur'
                await update.message.reply_text(
                    self.escape_markdown(f"‚ùå Erreur g√©n√©ration code\n\n{error_msg}\n\nR√©essayez ou utilisez le QR Code."),
                    parse_mode='MarkdownV2',
                    reply_markup=self.get_main_keyboard()
                )
                
        except Exception as e:
            logger.error(f"Erreur traitement num√©ro: {e}")
            await update.message.reply_text(
                self.escape_markdown("‚ùå Erreur de connexion\n\nLe serveur ne r√©pond pas. R√©essayez plus tard."),
                parse_mode='MarkdownV2',
                reply_markup=self.get_main_keyboard()
            )
        
        # R√©initialiser l'√©tat
        context.user_data['waiting_for_phone'] = False
        context.user_data['pending_pairing'] = False

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text
        chat_id = update.effective_chat.id
        
        # Gestion des boutons du clavier
        if text == "üîë Utiliser Code":
            await self.use_code(update, context)
        elif text == "üíé S'abonner":
            await self.subscribe_info(update, context)
        elif text == "üîó Connecter WhatsApp":
            await self.connect_options(update, context)
        elif text == "üìä Statut":
            await self.status(update, context)
        elif text == "üÜò Aide":
            await self.help(update, context)
        elif text == "üì± Menu Principal":
            await self.show_main_menu(update, context)
        elif text == "‚öôÔ∏è Param√®tres WhatsApp":
            await self.whatsapp_settings(update, context)
        elif text == "üì± QR Code":
            await self.connect_whatsapp_qr(update, context)
        elif text == "üî¢ Pairing Code":
            await self.connect_whatsapp_pairing(update, context)
        elif text == "üéØ Essai 24h Gratuit":
            await self.start_trial_session(update, context)
        elif text == "üíé Acheter Premium":
            await self.subscribe_info(update, context)
        
        # Gestion du num√©ro de t√©l√©phone pour pairing
        elif context.user_data.get('waiting_for_phone'):
            await self.process_phone_number(update, context)
        
        # Boutons admin
        elif text == "üîë G√©n√©rer Code" and chat_id in ADMIN_IDS:
            await update.message.reply_text(
                self.escape_markdown("""
üîë G√©n√©ration de code

Utilisez la commande: /generate_code <plan> <dur√©e>

Exemples:
/generate_code monthly
/generate_code yearly 365
/generate_code custom 60
                """),
                parse_mode='MarkdownV2'
            )
        elif text == "üìä Statistiques" and chat_id in ADMIN_IDS:
            await self.stats(update, context)
        elif text == "üîÑ Mise √† Jour" and chat_id in ADMIN_IDS:
            await self.upgrade_bot(update, context)
        elif text == "‚öôÔ∏è Commandes" and chat_id in ADMIN_IDS:
            await self.manage_commands(update, context)
        elif text == "üë• Utilisateurs" and chat_id in ADMIN_IDS:
            await self.show_users(update, context)
        
        # Boutons param√®tres WhatsApp
        elif text == "üîá Activer Mode Silencieux":
            await self.handle_whatsapp_settings(update, context)
        elif text == "üîä D√©sactiver Mode Silencieux":
            await self.handle_whatsapp_settings(update, context)
        elif text == "üîí Activer Mode Priv√©":
            await self.handle_whatsapp_settings(update, context)
        elif text == "üîì D√©sactiver Mode Priv√©":
            await self.handle_whatsapp_settings(update, context)
        elif text == "üë• G√©rer Acc√®s":
            await self.handle_whatsapp_settings(update, context)
        
        # Gestion des codes d'acc√®s
        elif context.user_data.get('waiting_for_code'):
            await self.process_access_code(update, context)

    async def process_access_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        code = update.message.text.strip().upper()
        
        # Validation basique du format
        if not re.match(r'^NOVA-[A-Z0-9]{7}$', code):
            await update.message.reply_text(
                self.escape_markdown("""
‚ùå Format de code invalide

Le code doit √™tre au format: NOVA-XXXXXXX

Veuillez r√©essayer:
                """),
                parse_mode='MarkdownV2'
            )
            return
            
        await update.message.reply_text(
            self.escape_markdown("üîÑ Validation du code..."), 
            parse_mode='MarkdownV2'
        )
        
        # Valider le code via l'API
        validation_result = await self.validate_access_code(chat_id, code)
        
        if validation_result.get('valid'):
            plan = validation_result.get('plan', 'monthly')
            duration = validation_result.get('duration', 30)
            end_date = validation_result.get('expiresAt')
            
            # Gestion s√©curis√©e de la date
            try:
                if isinstance(end_date, str):
                    formatted_date = datetime.fromisoformat(end_date.replace('Z', '+00:00')).strftime('%d/%m/%Y')
                else:
                    # Si end_date n'est pas une string, calculer la date manuellement
                    future_date = datetime.now() + timedelta(days=duration)
                    formatted_date = future_date.strftime('%d/%m/%Y')
            except (ValueError, TypeError) as e:
                # En cas d'erreur, utiliser une date par d√©faut
                future_date = datetime.now() + timedelta(days=duration)
                formatted_date = future_date.strftime('%d/%m/%Y')
            
            success_text = self.escape_markdown(f"""
‚úÖ Code valid√© avec succ√®s!

üéâ F√©licitations! Votre acc√®s NOVA-MD Premium est maintenant activ√©.

üìã D√©tails de votre abonnement:
‚Ä¢ Plan: {plan.capitalize()}
‚Ä¢ Dur√©e: {duration} jours
‚Ä¢ Expire le: {formatted_date}

üîê Fonctionnalit√©s activ√©es:
‚Ä¢ Session WhatsApp PERMANENTE
‚Ä¢ Commandes audio avanc√©es
‚Ä¢ Gestion de m√©dias intelligente
‚Ä¢ Mode silencieux
‚Ä¢ Contr√¥le d'acc√®s
‚Ä¢ Support prioritaire 24/7

üöÄ Prochaine √©tape:
Utilisez le bouton üîó Connecter WhatsApp pour commencer!
            """)
            
            await update.message.reply_text(
                success_text, 
                parse_mode='MarkdownV2',
                reply_markup=self.get_main_keyboard()
            )
            
        else:
            error_reason = validation_result.get('reason', 'Erreur inconnue')
            await update.message.reply_text(
                self.escape_markdown(f"‚ùå Code invalide\n\nRaison: {error_reason}\n\nV√©rifiez le code ou contactez {SUPPORT_CONTACT}"),
                parse_mode='MarkdownV2',
                reply_markup=self.get_main_keyboard()
            )
            
        context.user_data['waiting_for_code'] = False

    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        
        if chat_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå Acc√®s r√©serv√© aux administrateurs.")
            return
            
        admin_text = self.escape_markdown("""
üëë Panel Administrateur NOVA-MD

Commandes disponibles:
‚Ä¢ /generate_code - Cr√©er un code d'acc√®s
‚Ä¢ /stats - Statistiques du syst√®me
‚Ä¢ /upgrade - Mettre √† jour le bot
‚Ä¢ /commands - G√©rer les commandes

Utilisez les boutons ci-dessous ou les commandes!
        """)
        
        await update.message.reply_text(
            admin_text,
            reply_markup=self.get_admin_keyboard(),
            parse_mode='MarkdownV2'
        )

    async def generate_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        
        if chat_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå Acc√®s r√©serv√© aux administrateurs.")
            return
            
        args = context.args
        plan = 'monthly'
        duration = None
        
        if args:
            plan = args[0]
            if len(args) > 1 and args[1].isdigit():
                duration = int(args[1])
        
        await update.message.reply_text(
            self.escape_markdown(f"üîÑ G√©n√©ration d'un code {plan}..."),
            parse_mode='MarkdownV2'
        )
        
        code_result = await self.generate_access_code(plan, duration)
        
        if code_result and code_result.get('success'):
            code_text = self.escape_markdown(f"""
‚úÖ Code d'acc√®s g√©n√©r√©

üîë Code: `{code_result['code']}`
üìÖ Plan: {plan}
‚è±Ô∏è Dur√©e: {code_result['duration']} jours
üìÖ Expire le: {datetime.fromisoformat(code_result['expiresAt']).strftime('%d/%m/%Y')}

Instructions:
‚Ä¢ Le code est utilisable par UN SEUL utilisateur
‚Ä¢ UN SEUL device WhatsApp peut √™tre connect√©
‚Ä¢ Valable jusqu'√† la date d'expiration
            """)
            await update.message.reply_text(code_text, parse_mode='MarkdownV2')
        else:
            await update.message.reply_text("‚ùå Erreur lors de la g√©n√©ration du code.")

    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        
        if chat_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå Acc√®s r√©serv√© aux administrateurs.")
            return
            
        stats_data = await self.get_system_stats()
        
        if stats_data:
            stats_text = self.escape_markdown(f"""
üìä Statistiques NOVA-MD

üë• Utilisateurs:
‚Ä¢ Abonn√©s actifs: {stats_data.get('activeSubs', 0)}
‚Ä¢ Codes g√©n√©r√©s: {stats_data.get('totalCodes', 0)}
‚Ä¢ Codes utilis√©s: {stats_data.get('usedCodes', 0)}

üì± Sessions:
‚Ä¢ Total: {stats_data.get('sessionStats', {}).get('total', 0)}
‚Ä¢ Connect√©es: {stats_data.get('sessionStats', {}).get('connected', 0)}
‚Ä¢ Sessions permanentes: {stats_data.get('sessionStats', {}).get('persistentSessions', 0)}

üîÑ Syst√®me:
‚Ä¢ Version: v{stats_data.get('version', 'N/A')}
‚Ä¢ Uptime: {stats_data.get('uptime', 0)} secondes
‚Ä¢ Statut: {stats_data.get('resourceStats', {}).get('status', 'N/A')}
            """)
            await update.message.reply_text(stats_text, parse_mode='MarkdownV2')
        else:
            await update.message.reply_text("‚ùå Erreur lors de la r√©cup√©ration des statistiques.")

    async def upgrade_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        
        if chat_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå Acc√®s r√©serv√© aux administrateurs.")
            return
            
        await update.message.reply_text(
            self.escape_markdown("üîÑ V√©rification des mises √† jour..."),
            parse_mode='MarkdownV2'
        )

    async def manage_commands(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        
        if chat_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå Acc√®s r√©serv√© aux administrateurs.")
            return
            
        commands_info = await self.get_commands_info()
        
        if commands_info:
            commands_text = self.escape_markdown(f"""
‚öôÔ∏è Gestion des Commandes

üìÅ Commandes personnalis√©es: {commands_info.get('total', 0)}

Cat√©gories:
Utilisez /help pour voir toutes les commandes disponibles.

Pour ajouter une commande:
Contactez le d√©veloppeur ou utilisez le syst√®me de mise √† jour.
            """)
            await update.message.reply_text(commands_text, parse_mode='MarkdownV2')
        else:
            await update.message.reply_text(
                self.escape_markdown("‚ùå Erreur lors de la r√©cup√©ration des commandes."),
                parse_mode='MarkdownV2'
            )

    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        
        access_check = await self.check_user_access(chat_id)
        
        if access_check['hasAccess']:
            session_info = await self.get_user_session(chat_id)
            
            status_text = self.escape_markdown(f"""
‚úÖ Statut NOVA-MD Premium

üíé Abonnement:
‚Ä¢ Plan: {access_check.get('plan', 'N/A').capitalize()}
‚Ä¢ Jours restants: {access_check.get('daysLeft', 0)}
‚Ä¢ Expire le: {access_check.get('endDate', 'N/A')}

üì± Session WhatsApp:
‚Ä¢ Statut: {'üü¢ Connect√©e' if session_info and session_info.get('status') == 'connected' else 'üî¥ Non connect√©e'}
‚Ä¢ Type: Session permanente
‚Ä¢ Device: Unique (1 code = 1 device)

üí° Votre session reste active automatiquement!
            """)
        else:
            status_text = self.escape_markdown(f"""
‚ùå Statut: Acc√®s non activ√©

Vous n'avez pas d'abonnement actif.

üìã Pour obtenir l'acc√®s:
1. Contactez {SUPPORT_CONTACT}
2. Choisissez votre formule
3. Recevez votre code unique
4. Utilisez le bouton üîë Utiliser Code
            """)
        
        await update.message.reply_text(
            status_text, 
            parse_mode='MarkdownV2',
            reply_markup=self.get_main_keyboard()
        )

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = self.escape_markdown(f"""
üÜò Aide NOVA-MD

Navigation:
Utilisez les boutons du clavier pour naviguer facilement!

Fonctionnalit√©s:
‚Ä¢ üîë Utiliser Code - Activer un code d'acc√®s
‚Ä¢ üíé S'abonner - Informations abonnement  
‚Ä¢ üîó Connecter WhatsApp - Options connexion
‚Ä¢ üìä Statut - V√©rifier votre statut
‚Ä¢ ‚öôÔ∏è Param√®tres WhatsApp - Configurer le bot
‚Ä¢ üì± Menu Principal - Retour au menu

Sessions Permanentes:
‚Ä¢ Abonn√©s: Session WhatsApp permanente
‚Ä¢ 1 code = 1 utilisateur = 1 device
‚Ä¢ Pas de reconnexion n√©cessaire

Support:
Probl√®mes? Contactez {SUPPORT_CONTACT}
        """)
        
        await update.message.reply_text(
            help_text, 
            parse_mode='MarkdownV2',
            reply_markup=self.get_main_keyboard()
        )

    async def whatsapp_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        
        # V√©rifier l'acc√®s
        access_check = await self.check_user_access(chat_id)
        if not access_check['hasAccess']:
            await update.message.reply_text(
                self.escape_markdown("‚ùå Acc√®s requis\n\nVous devez avoir un abonnement actif."),
                parse_mode='MarkdownV2',
                reply_markup=self.get_main_keyboard()
            )
            return
        
        # R√©cup√©rer les param√®tres WhatsApp
        settings = await self.get_whatsapp_settings(chat_id)
        
        settings_text = self.escape_markdown(f"""
‚öôÔ∏è Param√®tres WhatsApp - NOVA-MD

üîá Mode Silencieux: {'‚úÖ ACTIV√â' if settings.get('silent_mode') else '‚ùå D√©sactiv√©'}
‚Ä¢ Seul vous voyez les r√©ponses aux commandes
‚Ä¢ Les autres ne voient ni la commande ni le r√©sultat

üîí Mode Priv√©: {'‚úÖ ACTIV√â' if settings.get('private_mode') else '‚ùå D√©sactiv√©'}
‚Ä¢ Contr√¥le qui peut utiliser votre bot WhatsApp
‚Ä¢ Num√©ros autoris√©s: {', '.join(settings.get('allowed_users', [])) if settings.get('allowed_users') else 'Tout le monde'}

Commandes WhatsApp disponibles:
!silent - Activer/d√©sactiver le mode silencieux
!private - G√©rer les acc√®s
!private +237612345678 - Autoriser un num√©ro
!private all - Autoriser tout le monde
!settings - Voir les param√®tres
!help - Aide compl√®te
        """)
        
        await update.message.reply_text(
            settings_text,
            parse_mode='MarkdownV2',
            reply_markup=self.get_settings_keyboard()
        )

    async def handle_whatsapp_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text
        chat_id = update.effective_chat.id
        
        if text == "üîá Activer Mode Silencieux":
            result = await self.update_whatsapp_settings(chat_id, {'silent_mode': True})
            if result.get('success'):
                await update.message.reply_text(
                    self.escape_markdown("‚úÖ Mode silencieux activ√©\n\nSur WhatsApp:\n‚Ä¢ Seul vous verrez les r√©ponses\n‚Ä¢ Les autres ne voient rien\n‚Ä¢ Utilisez `!silent` pour d√©sactiver"),
                    parse_mode='MarkdownV2',
                    reply_markup=self.get_main_keyboard()
                )
            else:
                await update.message.reply_text("‚ùå Erreur activation mode silencieux")
                
        elif text == "üîä D√©sactiver Mode Silencieux":
            result = await self.update_whatsapp_settings(chat_id, {'silent_mode': False})
            if result.get('success'):
                await update.message.reply_text(
                    self.escape_markdown("‚úÖ Mode silencieux d√©sactiv√©\n\nSur WhatsApp:\n‚Ä¢ Tout le monde voit les commandes\n‚Ä¢ Les r√©ponses sont publiques"),
                    parse_mode='MarkdownV2',
                    reply_markup=self.get_main_keyboard()
                )
            else:
                await update.message.reply_text("‚ùå Erreur d√©sactivation mode silencieux")
                
        elif text == "üîí Activer Mode Priv√©":
            result = await self.update_whatsapp_settings(chat_id, {
                'private_mode': True,
                'allowed_users': ['all']
            })
            if result.get('success'):
                await update.message.reply_text(
                    self.escape_markdown("‚úÖ Mode priv√© activ√©\n\nSur WhatsApp:\n‚Ä¢ Seuls les utilisateurs autoris√©s peuvent utiliser le bot\n‚Ä¢ Par d√©faut: tout le monde est autoris√©\n‚Ä¢ Utilisez `!private +237612345678` sur WhatsApp pour restreindre"),
                    parse_mode='MarkdownV2',
                    reply_markup=self.get_main_keyboard()
                )
            else:
                await update.message.reply_text("‚ùå Erreur activation mode priv√©")
                
        elif text == "üîì D√©sactiver Mode Priv√©":
            result = await self.update_whatsapp_settings(chat_id, {
                'private_mode': False,
                'allowed_users': []
            })
            if result.get('success'):
                await update.message.reply_text(
                    self.escape_markdown("‚úÖ Mode priv√© d√©sactiv√©\n\nSur WhatsApp:\n‚Ä¢ Tout le monde peut utiliser le bot\n‚Ä¢ Aucune restriction d'acc√®s"),
                    parse_mode='MarkdownV2',
                    reply_markup=self.get_main_keyboard()
                )
            else:
                await update.message.reply_text("‚ùå Erreur d√©sactivation mode priv√©")
                
        elif text == "üë• G√©rer Acc√®s":
            await update.message.reply_text(
                self.escape_markdown("""
üë• Gestion des acc√®s WhatsApp

Pour restreindre l'acc√®s √† des num√©ros sp√©cifiques:

1. Allez sur WhatsApp
2. Envoyez cette commande √† votre bot:
`!private +237612345678 +237698765432`

Pour autoriser tout le monde:
`!private all`

Exemples:
‚Ä¢ `!private +237612345678` - Un seul num√©ro
‚Ä¢ `!private +237612345678 +237698765432` - Deux num√©ros
‚Ä¢ `!private all` - Tout le monde (par d√©faut)
                """),
                parse_mode='MarkdownV2',
                reply_markup=self.get_main_keyboard()
            )

    async def show_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Afficher les utilisateurs actifs"""
        chat_id = update.effective_chat.id
        
        if chat_id not in ADMIN_IDS:
            return
            
        users_data = await self.get_active_users()
        
        if users_data:
            users_list = '\n'.join([f'‚Ä¢ {user.get("first_name", "N/A")} ({user.get("chat_id", "N/A")})' for user in users_data[:10]])
            users_text = self.escape_markdown(f"""
üë• Utilisateurs Actifs

Total: {len(users_data)} utilisateurs

Derniers utilisateurs:
{users_list}

Pour plus de d√©tails: /stats
            """)
            await update.message.reply_text(users_text, parse_mode='MarkdownV2')
        else:
            await update.message.reply_text("‚ùå Aucun utilisateur actif trouv√©.")

    async def send_pairing_code(self, chat_id, code, phone_number):
        """Envoyer le code de pairing √† l'utilisateur"""
        pairing_text = self.escape_markdown(f"""
üîê Connexion par Code de Pairing

üì± Votre code de pairing:
`{code}`

Instructions:
1. Ouvrez WhatsApp sur votre t√©l√©phone
2. Allez dans Param√®tres ‚Üí Appareils li√©s 
3. S√©lectionnez Lier un appareil
4. Entrez le code ci-dessus
5. Attendez la confirmation

‚è±Ô∏è Ce code expire dans 5 minutes

La connexion se fera automatiquement!
        """)
        
        await self.send_message(chat_id, pairing_text)

    # M√©thodes d'API pour communiquer avec le serveur Node.js
    async def register_user(self, chat_id, name, username):
        """Enregistrer un utilisateur dans la base"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{NODE_API_URL}/api/users/register", json={
                    'chat_id': str(chat_id),
                    'name': name,
                    'username': username
                }) as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"Erreur enregistrement utilisateur: {e}")
            return None

    async def validate_access_code(self, chat_id, code):
        """Valider un code d'acc√®s"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{NODE_API_URL}/api/auth/validate-code", json={
                    'chat_id': str(chat_id),
                    'code': code
                }) as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"Erreur validation code: {e}")
            return {'valid': False, 'reason': 'Erreur syst√®me'}

    async def check_user_access(self, chat_id):
        """V√©rifier l'acc√®s d'un utilisateur"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{NODE_API_URL}/api/auth/access/{chat_id}") as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"Erreur v√©rification acc√®s: {e}")
            return {'hasAccess': False, 'reason': 'Erreur syst√®me'}

    async def generate_access_code(self, plan, duration):
        """G√©n√©rer un code d'acc√®s"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{NODE_API_URL}/api/admin/generate-code", json={
                    'plan': plan,
                    'duration': duration
                }) as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"Erreur g√©n√©ration code: {e}")
            return None

    async def get_system_stats(self):
        """Obtenir les statistiques syst√®me"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{NODE_API_URL}/api/admin/stats") as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration stats: {e}")
            return None

    async def create_whatsapp_session(self, chat_id, name, method='qr'):
        """Cr√©er une session WhatsApp"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{NODE_API_URL}/api/sessions/create", json={
                    'chat_id': str(chat_id),
                    'user_name': name,
                    'method': method,
                    'persistent': True
                }) as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"Erreur cr√©ation session: {e}")
            return None

    async def create_whatsapp_session_with_phone(self, chat_id, name, phone_number):
        """Cr√©er une session WhatsApp avec num√©ro pour pairing"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{NODE_API_URL}/api/sessions/create-with-phone", json={
                    'chat_id': str(chat_id),
                    'user_name': name,
                    'method': 'pairing',
                    'phone_number': phone_number,
                    'persistent': True
                }) as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"Erreur cr√©ation session avec phone: {e}")
            return None

    async def get_user_session(self, chat_id):
        """Obtenir la session d'un utilisateur"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{NODE_API_URL}/api/sessions/user/{chat_id}") as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration session: {e}")
            return None

    async def get_commands_info(self):
        """Obtenir les informations des commandes"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{NODE_API_URL}/api/commands/info") as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration commandes: {e}")
            return None

    async def get_active_users(self):
        """Obtenir les utilisateurs actifs"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{NODE_API_URL}/api/users/active") as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration utilisateurs: {e}")
            return []

    async def get_whatsapp_settings(self, user_id):
        """Obtenir les param√®tres WhatsApp"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{NODE_API_URL}/api/user/{user_id}/whatsapp-settings") as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration param√®tres: {e}")
            return {'silent_mode': False, 'private_mode': False, 'allowed_users': []}

    async def update_whatsapp_settings(self, user_id, settings):
        """Mettre √† jour les param√®tres WhatsApp"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{NODE_API_URL}/api/user/{user_id}/whatsapp-settings", json=settings) as response:
                    return await response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}

    async def get_active_sessions_count(self):
        """R√©cup√©rer le nombre de sessions actives"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{NODE_API_URL}/api/sessions/health") as response:
                    data = await response.json()
                    return data.get('connected', 0)
        except:
            return 0

    async def get_session_days(self, created_at):
        """Calculer le nombre de jours depuis la cr√©ation de la session"""
        if not created_at:
            return 0
        try:
            if created_at.endswith('Z'):
                created_at = created_at[:-1] + '+00:00'
            created_date = datetime.fromisoformat(created_at)
            return (datetime.now() - created_date).days
        except:
            return 0

    async def send_message(self, chat_id, text, parse_mode='MarkdownV2'):
        """Envoyer un message"""
        try:
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode
            )
        except Exception as e:
            logger.error(f"Erreur envoi message: {e}")

    def run(self):
        """D√©marrer le bot"""
        logger.info("ü§ñ D√©marrage du bot Telegram NOVA-MD...")
        self.application.run_polling()

if __name__ == '__main__':
    bot = NovaMDTelegramBot()
    bot.run()
