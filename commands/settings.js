const log = require('../utils/logger')(module);

module.exports = {
    name: 'settings',
    description: "Afficher les param√®tres actuels du bot",
    category: 'configuration',
    aliases: ['parametres', 'config', 'options'],
    
    run: async (context) => {
        try {
            const { sock, msg, sessionManager, replyWithTag } = context;
            
            if (!sock || !sock.user) {
                log.error('[SETTINGS] Socket non initialis√©e');
                return;
            }

            const remoteJid = msg.key.remoteJid;

            // Trouver la session correspondante
            const session = Array.from(sessionManager.sessions.values())
                .find(s => s.socket === sock);
                
            if (!session) {
                log.error('[SETTINGS] Session non trouv√©e');
                await replyWithTag(sock, remoteJid, msg, "‚ùå Session non trouv√©e.");
                return;
            }

            // R√©cup√©rer les param√®tres
            const userSettings = sessionManager.getUserSetting(session.userId);

            const settingsText = `‚öôÔ∏è *PARAM√àTRES NOVA-MD*

üîá *Mode Silencieux:* ${userSettings.silent_mode ? '‚úÖ ACTIV√â' : '‚ùå D√©sactiv√©'}
${userSettings.silent_mode ? 
    '‚Ä¢ Seul vous voyez les r√©ponses\n‚Ä¢ Commandes invisibles pour les autres' : 
    '‚Ä¢ Tout le monde voit les commandes\n‚Ä¢ Mode normal'}

üîí *Mode Priv√©:* ${userSettings.private_mode ? '‚úÖ ACTIV√â' : '‚ùå D√©sactiv√©'}
${userSettings.private_mode ? 
    `‚Ä¢ Acc√®s restreint\n‚Ä¢ Utilisateurs autoris√©s: ${userSettings.allowed_users?.join(', ') || 'Tout le monde'}` : 
    '‚Ä¢ Tout le monde peut utiliser le bot'}

üì± *Session:* ${session.subscriptionActive ? 'üíé PERMANENTE' : '‚ö†Ô∏è  Essai'}
‚è±Ô∏è *Connect√© depuis:* ${Math.round((Date.now() - session.createdAt) / (1000 * 60 * 60 * 24))} jours

*Commandes de configuration:*
!silent - Mode silencieux
!private - Contr√¥le d'acc√®s
!help - Aide compl√®te`;

            await replyWithTag(sock, remoteJid, msg, settingsText, userSettings);

            log.info(`[SETTINGS] Param√®tres affich√©s pour ${session.userId}`);

        } catch (error) {
            log.error(`[SETTINGS] Erreur : ${error.message}`);
            try {
                await context.replyWithTag(context.sock, context.msg.key.remoteJid, context.msg, 
                    "‚ùå Erreur lors de l'affichage des param√®tres.");
            } catch (e) {
                log.error(`[SETTINGS] Impossible d'envoyer l'erreur : ${e.message}`);
            }
        }
    }
}; 
